# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:22:34+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity, HTTPBearer
from fastapi import Header
from pydantic import conint

from models import (
    ApiHealthStatus,
    ApiVersion,
    AuthError,
    ContentEncoding,
    Desired,
    Error,
    Fallback,
    Locate,
    LocatePostResponse,
    Required,
)

app = MCPProxy(
    contact={'x-twitter': 'HERE'},
    description="Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.\n\nBreaking changes from v1:\n  - JSON fields\n    `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,\n    have been deprecated and replaced with\n    `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`\n    respectively.\n  - Dependent parameters combined as a subobject.\n    - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.\n    - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property.\n",
    license={
        'name': 'HERE Documentation License',
        'url': 'https://legal.here.com/en-gb/terms/documentation-license',
        'x-copyright': 'Copyright (C) 2017-2021 HERE Europe B.V.',
    },
    termsOfService='http://developer.here.com/terms-conditions',
    title='HERE Network Positioning API v2',
    version='2.1.1',
    servers=[
        {
            'description': 'Production Server',
            'url': 'https://positioning.hereapi.com/v2',
        },
        {
            'description': 'Production Server on Azure',
            'url': 'https://az.positioning.hereapi.com/v2',
        },
    ],
)


@app.get(
    '/health',
    description=""" Tests basic health of the service """,
    tags=['service_health_monitoring'],
    security=[
        APIKeyQuery(name="apiKey"),
        HTTPBearer(name="None"),
    ],
)
def get_health():
    """
    Service health
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/locate',
    description=""" Request WGS-84 compliant geocoordinates for a location based on 2G/3G/4G cell and/or WLAN measurements. """,
    tags=['location_data_fetching'],
    security=[
        APIKeyQuery(name="apiKey"),
        HTTPBearer(name="None"),
    ],
)
def post_locate(
    confidence: Optional[conint(ge=50, le=99)] = 68,
    content__encoding: Optional[ContentEncoding] = Header(
        None, alias='Content-Encoding'
    ),
    fallback: Optional[Fallback] = None,
    desired: Optional[Desired] = None,
    x__request__i_d: Optional[str] = Header(None, alias='X-Request-ID'),
    required: Optional[Required] = None,
    body: Locate = ...,
):
    """
    Location query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/version',
    description=""" Retrieves API Specification version information """,
    tags=['api_version_info'],
    security=[
        APIKeyQuery(name="apiKey"),
        HTTPBearer(name="None"),
    ],
)
def get_api_version():
    """
    API version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
