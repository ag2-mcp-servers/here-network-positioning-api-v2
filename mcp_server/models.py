# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:22:34+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class ApiHealthStatus(BaseModel):
    status: Optional[str] = Field(
        None, description='Health status of API', examples=['OK']
    )


class ApiVersion(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Version of API', examples=['2.0.3']
    )
    serviceVersion: Optional[str] = Field(
        None, description='Version of the Service', examples=['2.0.20']
    )


class AuthError(BaseModel):
    error: Optional[str] = Field(None, description='Error message')
    error_description: Optional[str] = Field(
        None, description='Detailed information about the error'
    )


class BaseLat(RootModel[confloat(ge=-90.0, le=90.0)]):
    root: confloat(ge=-90.0, le=90.0) = Field(
        ..., description='Base station latitude', examples=[40.689249]
    )


class BaseLng(RootModel[confloat(ge=-180.0, le=180.0)]):
    root: confloat(ge=-180.0, le=180.0) = Field(
        ..., description='Base station longitude', examples=[-74.0445]
    )


class Bcch(RootModel[conint(ge=0, le=1023)]):
    root: conint(ge=0, le=1023) = Field(
        ...,
        description='Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)',
        examples=[82],
    )


class Bsic(RootModel[conint(ge=0, le=63)]):
    root: conint(ge=0, le=63) = Field(
        ...,
        description='Base Station Identity Code (BSIC, for instance, color code)',
        examples=[6],
    )


class Bsid(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535) = Field(
        ..., description='Base Station ID (CDMA BSID, BID)', examples=[8584]
    )


class CellParams(RootModel[conint(ge=0, le=127)]):
    root: conint(ge=0, le=127) = Field(
        ..., description='Cell Parameters ID (CDMA Spreading Code ID)', examples=[86]
    )


class Channel(RootModel[conint(ge=0, le=2047)]):
    root: conint(ge=0, le=2047) = Field(
        ..., description='CDMA channel frequency', examples=[1]
    )


class ClientInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    firmware: Optional[constr(min_length=1, max_length=150)] = Field(
        None,
        description='Device firmware version information',
        examples=['G506FXX453J1'],
    )
    manufacturer: constr(min_length=2, max_length=50) = Field(
        ..., description='Manufacturer of the device (hardware)', examples=['Lemon']
    )
    model: constr(min_length=1, max_length=50) = Field(
        ..., description='Model of the device (hardware)', examples=['Flagship X1']
    )
    name: constr(min_length=3, max_length=50) = Field(
        ...,
        description='Name of the client software accessing the HERE API',
        examples=['FinderApp'],
    )
    platform: Optional[constr(min_length=3, max_length=50)] = Field(
        None,
        description='Software platform information of the device, for example operating system name and version.',
        examples=['Android 7.0'],
    )
    version: constr(min_length=3, max_length=13) = Field(
        ...,
        description='Version of the client software in format X.Y.Z, where X [0..255] is a major, Y [0..255] is a minor, and Z [0..65535] is a build version number. Increase the version/build number for each release of the client.',
        examples=['2.0.31'],
    )


class Earfcn(RootModel[conint(ge=0, le=262143)]):
    root: conint(ge=0, le=262143) = Field(
        ...,
        description='Evolved Absolute Radio Frequency Channel (E-ARFCN)',
        examples=[6300],
    )


class ErrorDetail(BaseModel):
    message: Optional[str] = Field(
        None, description='Localize message', examples=['Size must be between 3 and 64']
    )
    messagePlaceholders: Optional[Any] = None
    messageTemplate: Optional[str] = Field(
        None, examples=['validation.constraint.between']
    )
    source: Optional[str] = Field(
        None,
        description='Source of the error, using JSONPath',
        examples=['$.data.attributes[0].size'],
    )
    title: Optional[str] = Field(
        None, description='Title for the detail', examples=['Invalid size value']
    )


class EutranCid(RootModel[conint(ge=0, le=268435455)]):
    root: conint(ge=0, le=268435455) = Field(
        ...,
        description='E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional.\n',
        examples=[2898945],
    )


class EutranCidNmr(RootModel[conint(ge=0, le=268435455)]):
    root: conint(ge=0, le=268435455) = Field(
        ...,
        description='E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID).',
        examples=[2898945],
    )


class GeranCid(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535) = Field(
        ..., description='Cell identifier (GERAN CID)', examples=[16503]
    )


class GsmLocalId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bcch: Bcch
    bsic: Bsic


class GsmTimingAdvance(RootModel[conint(ge=0, le=63)]):
    root: conint(ge=0, le=63) = Field(
        ...,
        description='Timing advance (TA). Expressed in the units of GSM bits equaling to 48/13 Î¼s ~ 1107 meters.',
        examples=[3],
    )


class Lac(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535) = Field(
        ...,
        description='Location Area Code (LAC). Note, value 65534 is invalid.',
        examples=[5126],
    )


class Latitude(RootModel[confloat(ge=-90.0, le=90.0)]):
    root: confloat(ge=-90.0, le=90.0) = Field(
        ...,
        description='Latitude in WGS-84 format, decimal representation ranging from -90 to 90.',
        examples=[61.4706194],
    )


class Longitude(RootModel[confloat(ge=-180.0, le=180.0)]):
    root: confloat(ge=-180.0, le=180.0) = Field(
        ...,
        description='Longitude in WGS-84 format, decimal representation ranging from -180 to 180.',
        examples=[23.72265816],
    )


class LteTimingAdvance(RootModel[conint(ge=0, le=1282)]):
    root: conint(ge=0, le=1282) = Field(
        ...,
        description='Timing Advance. Expressed in the units of 16*Ts (16 Basic time units) = 16/(15000*2048) seconds ~ 156meters. For reference see 3GPP TS 36.213 and 36.211.\n',
        examples=[40],
    )


class Mcc(RootModel[conint(ge=200, le=999)]):
    root: conint(ge=200, le=999) = Field(
        ...,
        description='Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used\n',
        examples=[262],
    )


class Mnc(RootModel[conint(ge=0, le=999)]):
    root: conint(ge=0, le=999) = Field(
        ..., description='Mobile Network Code (MNC).', examples=[2]
    )


class Nid(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535) = Field(
        ..., description='Network ID (NID)', examples=[10]
    )


class Pathloss(RootModel[conint(ge=46, le=158)]):
    root: conint(ge=46, le=158) = Field(
        ..., description='UTRAN pathloss (dBm)', examples=[80]
    )


class Pci(RootModel[conint(ge=0, le=503)]):
    root: conint(ge=0, le=503) = Field(
        ..., description='Physical Cell Identity (PCI)', examples=[237]
    )


class PilotPower(RootModel[conint(ge=-142, le=-49)]):
    root: conint(ge=-142, le=-49) = Field(
        ...,
        description='Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49.\n',
        examples=[-99],
    )


class PnOffset(RootModel[conint(ge=0, le=511)]):
    root: conint(ge=0, le=511) = Field(
        ...,
        description='Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell.\n',
        examples=[357],
    )


class PositionLocate(BaseModel):
    accuracy: confloat(ge=1.0) = Field(
        ...,
        description='Uncertainty circle radius in meters (degree of confidence according to the `confidence` parameter).',
        examples=[829],
    )
    alt: Optional[float] = Field(
        None,
        description='Altitude in meters (referenced to the WGS-84 ellipsoid) negative or positive.',
        examples=[142],
    )
    altAccuracy: Optional[confloat(ge=1.0)] = Field(
        None,
        description='Uncertainty of the altitude estimate in meters (degree of confidence according to the `confidence` parameter). This field superceeds old `altaccuracy`.\n',
        examples=[20],
    )
    lat: Latitude
    lng: Longitude


class Psc(RootModel[conint(ge=0, le=511)]):
    root: conint(ge=0, le=511) = Field(
        ...,
        description='Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel).',
        examples=[149],
    )


class RegistrationZone(RootModel[conint(ge=0, le=4095)]):
    root: conint(ge=0, le=4095) = Field(
        ..., description='CDMA Registration Zone (RZ)', examples=[1234]
    )


class Rscp(RootModel[conint(ge=-120, le=-25)]):
    root: conint(ge=-120, le=-25) = Field(
        ...,
        description='Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.\n',
        examples=[-50],
    )


class Rsrp(RootModel[conint(ge=-140, le=-44)]):
    root: conint(ge=-140, le=-44) = Field(
        ...,
        description='Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44.\n',
        examples=[-95],
    )


class Rsrq(RootModel[confloat(ge=-19.5, le=-3.0)]):
    root: confloat(ge=-19.5, le=-3.0) = Field(
        ...,
        description='Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB.\n',
        examples=[-12],
    )


class Rss(RootModel[conint(ge=-128, le=0)]):
    root: conint(ge=-128, le=0) = Field(
        ..., description='Received signal level (dBm) at the terminal', examples=[-76]
    )


class RxLevel(RootModel[conint(ge=-110, le=-25)]):
    root: conint(ge=-110, le=-25) = Field(
        ...,
        description='Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25.\n',
        examples=[-77],
    )


class Sid(RootModel[conint(ge=1, le=32767)]):
    root: conint(ge=1, le=32767) = Field(
        ..., description='System ID (SID)', examples=[4162]
    )


class Tac(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535) = Field(
        ..., description='Tracking Area Code (TAC)', examples=[1]
    )


class TdscdmaTimingAdvance(RootModel[conint(ge=0, le=1530)]):
    root: conint(ge=0, le=1530) = Field(
        ...,
        description='Timing advance (TA). Round-Trip distance presented in the units of 4*c/7.68e6 ~156 meters. That is, the scaling factor is 4 times the chip length at chip rate of 7.68 Mchips/s. Note that at chip rates 1.28 Mchips/s and 3.84 Mchips/s you need to scale according to chip length of 7.68 Mchips/s, that is, multiply by 6 or 2 if needed.\n',
        examples=[20],
    )


class Uarfcn(RootModel[conint(ge=0, le=16383)]):
    root: conint(ge=0, le=16383) = Field(
        ..., description='UTRAN Absolute Radio Frequency (U-ARFCN)', examples=[10100]
    )


class Uarfcndl(RootModel[conint(ge=0, le=16383)]):
    root: conint(ge=0, le=16383) = Field(
        ...,
        description='UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)',
        examples=[10786],
    )


class UtranCid(RootModel[conint(ge=0, le=268435455)]):
    root: conint(ge=0, le=268435455) = Field(
        ...,
        description='UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.\n',
        examples=[14674663],
    )


class UtranCidNmr(RootModel[conint(ge=0, le=268435455)]):
    root: conint(ge=0, le=268435455) = Field(
        ...,
        description='UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID).',
        examples=[14674662],
    )


class WcdmaLocalId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    psc: Psc
    uarfcndl: Uarfcndl


class WcdmaNmr(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cid: Optional[UtranCid] = None
    pathloss: Optional[Pathloss] = None
    psc: Psc
    rscp: Optional[Rscp] = None
    uarfcndl: Uarfcndl


class WcdmaNmrArray(RootModel[List[WcdmaNmr]]):
    root: List[WcdmaNmr] = Field(
        ...,
        description='WCDMA Network measurements. Maximum of 8 distinct uarfcndl frequencies.',
        examples=[[{'psc': 149, 'uarfcndl': 10786}, {'psc': 211, 'uarfcndl': 10762}]],
        max_length=32,
        min_length=1,
    )


class WlanLocate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mac: constr(
        pattern=r'^((([0-9a-fA-F]{2}:){5})|(([0-9a-fA-F]{2}-){5}))[0-9a-fA-F]{2}$'
    ) = Field(
        ...,
        description='The MAC address of the WLAN access point. MAC-48 address with colon (:) or hyphen (-) separators, upper or lower case hex digits. Note that if the SSID contains postfix "_nomap", the AP should not be used for positioning.\n',
        examples=['A0-E4-53-20-66-AD'],
    )
    rss: Optional[Rss] = None


class FallbackEnum(Enum):
    any = 'any'
    area = 'area'
    singleWifi = 'singleWifi'


class DesiredEnum(Enum):
    altitude = 'altitude'


class RequiredEnum(Enum):
    altitude = 'altitude'


class LocatePostResponse(BaseModel):
    location: PositionLocate


class ContentEncoding(Enum):
    gzip = 'gzip'


class Fallback(RootModel[List[FallbackEnum]]):
    root: List[FallbackEnum]


class Desired(RootModel[List[DesiredEnum]]):
    root: List[DesiredEnum]


class Required(RootModel[List[RequiredEnum]]):
    root: List[RequiredEnum]


class CdmaLocalId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Channel
    pnOffset: PnOffset


class CdmaNmr(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bsid: Optional[Bsid] = None
    channel: Channel
    pilotPower: Optional[PilotPower] = None
    pnOffset: PnOffset


class CdmaNmrArray(RootModel[List[CdmaNmr]]):
    root: List[CdmaNmr] = Field(
        ...,
        description='CDMA Network measurements',
        examples=[[{'channel': 0, 'pnOffset': 357}, {'channel': 0, 'pnOffset': 366}]],
        max_length=32,
        min_length=1,
    )


class Error(BaseModel):
    action: str = Field(..., description='Actionable instructions for the user')
    cause: str = Field(
        ...,
        description='Reason for the error',
        examples=['The input data in question does not meet validation rules'],
    )
    code: str = Field(..., description='Error code', examples=['E606101'])
    correlationId: UUID = Field(
        ...,
        description='Copy from X-Correlation-ID header for logging',
        examples=['4199533b-6290-41db-8d79-edf4f4019a74'],
    )
    details: Optional[List[ErrorDetail]] = None
    status: float = Field(..., description='Equals HTTP status code', examples=[400])
    title: str = Field(
        ...,
        description='Localized error string',
        examples=['Input data failed validation'],
    )


class GsmNmrGlobalId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cid: GeranCid
    lac: Lac


class LteLocalId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    earfcn: Earfcn
    pci: Pci


class LteNmr(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cid: Optional[EutranCid] = None
    earfcn: Earfcn
    pci: Pci
    rsrp: Optional[Rsrp] = None
    rsrq: Optional[Rsrq] = None


class LteNmrArray(RootModel[List[LteNmr]]):
    root: List[LteNmr] = Field(
        ...,
        description='LTE Network measurements',
        examples=[[{'earfcn': 6300, 'pci': 237}, {'earfcn': 6300, 'pci': 442}]],
        max_length=32,
        min_length=1,
    )


class TdscdmaLocalId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cellParams: CellParams
    uarfcn: Uarfcn


class TdscdmaNmr(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cellParams: CellParams
    cid: Optional[UtranCid] = None
    pathloss: Optional[Pathloss] = None
    rscp: Optional[Rscp] = None
    uarfcn: Uarfcn


class TdscdmaNmrArray(RootModel[List[TdscdmaNmr]]):
    root: List[TdscdmaNmr] = Field(
        ...,
        description='TD-SCDMA Network measurements. Maximum of 8 distinct uarfcn frequencies.',
        examples=[
            [{'cellParams': 86, 'uarfcn': 10100}, {'cellParams': 14, 'uarfcn': 10121}]
        ],
        max_length=32,
        min_length=1,
    )


class Wcdma(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cid: UtranCid
    lac: Optional[Lac] = None
    localId: Optional[WcdmaLocalId] = None
    mcc: Mcc
    mnc: Mnc
    nmr: Optional[WcdmaNmrArray] = None
    pathloss: Optional[Pathloss] = None
    rscp: Optional[Rscp] = None


class Cdma(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    baseLat: Optional[BaseLat] = None
    baseLng: Optional[BaseLng] = None
    bsid: Bsid
    localId: Optional[CdmaLocalId] = None
    nid: Nid
    nmr: Optional[CdmaNmrArray] = None
    pilotPower: Optional[PilotPower] = None
    rz: Optional[RegistrationZone] = None
    sid: Sid


class GsmNmr(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bcch: Bcch
    bsic: Bsic
    globalIdentity: Optional[GsmNmrGlobalId] = None
    rxLevel: Optional[RxLevel] = None


class GsmNmrArray(RootModel[List[GsmNmr]]):
    root: List[GsmNmr] = Field(
        ...,
        description='GSM Network measurements',
        examples=[[{'bcch': 82, 'bsic': 6}]],
        max_length=32,
        min_length=1,
    )


class Lte(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cid: EutranCid
    localId: Optional[LteLocalId] = None
    mcc: Mcc
    mnc: Mnc
    nmr: Optional[LteNmrArray] = None
    rsrp: Optional[Rsrp] = None
    rsrq: Optional[Rsrq] = None
    ta: Optional[LteTimingAdvance] = None
    tac: Optional[Tac] = None


class Tdscdma(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cid: UtranCid
    lac: Optional[Lac] = None
    localId: Optional[TdscdmaLocalId] = None
    mcc: Mcc
    mnc: Mnc
    nmr: Optional[TdscdmaNmrArray] = None
    pathloss: Optional[Pathloss] = None
    rscp: Optional[Rscp] = None
    ta: Optional[TdscdmaTimingAdvance] = None


class Gsm(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cid: GeranCid
    lac: Lac
    localId: Optional[GsmLocalId] = None
    mcc: Mcc
    mnc: Mnc
    nmr: Optional[GsmNmrArray] = None
    rxLevel: Optional[RxLevel] = None
    ta: Optional[GsmTimingAdvance] = None


class Locate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cdma: Optional[List[Cdma]] = Field(
        None, description='CDMA cells (CDMA2000)', max_length=16, min_length=1
    )
    client: Optional[ClientInfo] = None
    gsm: Optional[List[Gsm]] = Field(
        None, description='GSM cells (GERAN)', max_length=16, min_length=1
    )
    lte: Optional[List[Lte]] = Field(
        None, description='LTE cells (E-UTRA, 4G)', max_length=16, min_length=1
    )
    tdscdma: Optional[List[Tdscdma]] = Field(
        None,
        description='TD-SCDMA cells (UTRA-TDD, 3G UMTS TDD)',
        max_length=16,
        min_length=1,
    )
    wcdma: Optional[List[Wcdma]] = Field(
        None, description='WCDMA cells (UTRA-FDD, 3G UMTS)', max_length=16, min_length=1
    )
    wlan: Optional[List[WlanLocate]] = Field(
        None,
        description='WLAN access positions. For privacy reasons positioning based on a single WLAN AP is not possible; there has to be at least one other matching wlan or cell. Alternatively, you can allow fallbacks to less accurate single WLAN AP location estimates by using the setting `fallback=singleWifi`.\n',
        max_length=256,
        min_length=1,
    )
